1) generar codigo de 13 bits totales
con 9 de info y 4 de paridad

2) se definen las ecuaciones como una matriz en donde cada bit es una fila de la matriz.
las columnas son los datos.

P=[1 1 0 1 0 0 0 1 1]
  [1 0 1 0 1 0 1 1 0]  //Matriz de paridad
  [0 1 1 1 0 1 1 0 0]
  [0 1 0 0 1 1 1 1 1]

  para verificar si es código es valido se utiliza:
    H=P|I
      H=[[1. 1. 0. 1. 0. 0. 0. 1. 1. 1. 0. 0. 0.]
        [1. 0. 1. 0. 1. 0. 1. 1. 0. 0. 1. 0. 0.]   
        [0. 1. 1. 1. 0. 1. 1. 0. 0. 0. 0. 1. 0.]
        [0. 1. 0. 0. 1. 1. 1. 1. 1. 0. 0. 0. 1.]]

  
2) Matriz generadora
    G=I|P^t
    Generadora [[1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0.]
                [0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1.]
                [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0.]
                [0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 1. 0.]
                [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 1.]
                [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 1.]
                [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 1. 1. 1.]
                [0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1. 0. 1.]
                [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 1.]]
  

    Luego a un vector de datos X(entrada), se le asigna código C:
    XxorG=C

se tiene vector de entrada X=1001100001
se genera el codigo con XxorG=C

[100110001] xor   [1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0.]  =  C
                  [0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1.]
                  [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0.]
                  [0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 1. 0.]
                  [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 1.]
                  [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 1.]
                  [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 1. 1. 1.]
                  [0. 0. 0. 0. 0. 0. 0. 1. 0. 1. 1. 0. 1.]
                  [0. 0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 1.]

(¿como hacer xor de vectores?)
xor depende de la paridad si es par es 0, si es impar es 1

    xor de 100000000 = 1
    xor de 000000000 = 0
    xor de 000000000 = 0
    xor de 000100000 = 1
    xor de 000010000=  1
    ---
    ...    = [1 0 0 1 0 1 1 0 1 1 0 1 1] = C (codigo generado de 12bits, 9info, 4paridad)
original: 100101101   Codificado:1001011011011
Decodificación:

  C*H^t=(000)->valido
  C*H^t!=(000)->erroneo

Se crea la siguiente tabla de sindrome 


 C*[[1. 1. 0. 1. 0. 0. 0. 1. 1. 1. 0. 0. 0.] traspuesta = sindrome
          [1. 0. 1. 0. 1. 0. 1. 1. 0. 0. 1. 0. 0.]   
          [0. 1. 1. 1. 0. 1. 1. 0. 0. 0. 0. 1. 0.]
          [0. 1. 0. 0. 1. 1. 1. 1. 1. 0. 0. 0. 1.]]


  (100000000)*H^t=sincrome para error en primer bit
  (010000000)*H^t=sindrome para error en segundo bit
  ....

  Tabla de sindrome:
[sindrome, Codigo pos bit de error] 
[['1100', 0], 
['1011', 1],
['0110', 2], 
['1010', 3], 
['0101', 4], 
['0011', 5],
['0111', 6], 
['1101', 7], 
['1001', 8], 
['1000', 9], 
['0100', 10], 
['0010', 11], 
['0001', 12]]

Ahora si pongo un codigo y da este sindrome se sabe que posiblemente 
primer bit sea erroneo, este se cambia y prueba nuevamente, si ahora da (000) 
entonces se corrigio.(SOLO UN INTENTO DE CORRECIÓN CON ESTE MÉTODO)









dist min >=2
se puede detectar 1 bit